/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** commonChars(char ** A, int ASize, int* returnSize){
    if (A == NULL || ASize == 0) {
        (*returnSize) = 0;
        return NULL;
    }
    int res[100][26] = {0}; // 每个单词占一行
    char **rslt = malloc(sizeof(char*) * 100);
    int i, j;
    for (i = 0; i < 100; i++) {
        rslt[i] = malloc(sizeof(char) * 2);
    }
    for (i = 0; i < ASize; i++) {
        for (j = 0; j < strlen(A[i]); j++) {
            res[i][A[i][j] - 'a']++;
            //  printf("i = %d, %d\n", i, res[i][A[i][j] - 'a']);
        }
    }
    int idx = 0;
    for (i = 0; i < 26; i++) {
        int min = res[0][i];
        for (j = 1; j < ASize; j++) {
            if (res[j][i] < min) {
                min = res[j][i];
            }
        } // 找到最小的公共的
        while (min > 0) {
            rslt[idx][0] = i + 'a'; // 存储重复的字母
            rslt[idx][1] = '\0';
            idx++;
            min--;
        }
    }
    (*returnSize) = idx;
    return rslt;
}
