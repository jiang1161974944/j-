from itertools import combinations
class Solution:
    def numPoints(self, points: List[List[int]], r: int) -> int:
        n = len(points)
        def dist(a, b):
            return (a[0] - b[0])**2 + (a[1] - b[1])**2

        def get_center(p1, p2, r):
            (x1, y1), (x2, y2) = p1, p2
            if p1 == p2:
                return False
            dx, dy = x2 - x1, y2 - y1
            q = sqrt(dx**2 + dy**2)
            if q > 2.0*r:
                return False
            x3, y3 = (x1+x2)/2, (y1+y2)/2
            d = sqrt(r**2-(q/2)**2)
            c1 = (x3 - d*dy/q, y3 + d*dx/q)
            c2 = (x3 + d*dy/q, y3 - d*dx/q)
            return c1, c2
        res = 1
        if n >= 2:
            for selected in combinations(range(n), 2):
                p1, p2 = [points[i] for i in selected]
                c1 = ((p1[0] + p2[0])/2, (p1[1] + p2[1])/2)
                center = get_center(p1, p2, r)
                res = max(res, sum(dist(p, c1)<= r*r for p in points))
                if center:
                    res = max(res, sum(dist(p, center[0])<= r*r for p in points))
                    res = max(res, sum(dist(p, center[1])<= r*r for p in points))
        return res
