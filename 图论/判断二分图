// 栈结构，部分函数只调用一次，添加inline标记以加速
struct Stack
{
    int maxLen;
    int top;
    int *content;
};
// 生成栈
inline struct Stack *getStack(int maxLen)
{
    struct Stack *ret = (struct Stack *)malloc(sizeof(struct Stack));
    ret->maxLen = maxLen;
    ret->top = 0;
    ret->content = (int *)malloc(sizeof(int) * maxLen);
    return ret;
}
// 压入元素
inline bool push(struct Stack *target, int val)
{
    if (target->top == target->maxLen)
        return false;
    target->content[target->top++] = val;
    return true;
}
// 弹出元素
inline bool pop(struct Stack *target, int *ret)
{
    if (target->top == 0)
        return false;
    *ret = target->content[--target->top];
    return true;
}
// 获取栈顶元素
bool getTop(struct Stack *target, int *ret)
{
    if (target->top == 0)
        return false;
    *ret = target->content[target->top - 1];
    return true;
}
bool isBipartite(int** graph, int graphSize, int* graphColSize){
    int *status = (int *)memset(malloc(sizeof(int) * graphSize), 0, sizeof(int) * graphSize),
        i = 0, ret = 0, flag, position;
    struct Stack *stack = getStack(graphSize);
    for (i = 0; i < graphSize; i++)
    {
        if (status[i]) // 检测尚未经历的节点，避免图不连通
            continue;
        status[i] = 1;
        push(stack, i);
        while(getTop(stack, &ret)) // 栈为空时，所有元素归类完成，本次遍历结束
        {
            flag = 1;
            for (i = 0; i < graphColSize[ret]; i++)
            {
                position = graph[ret][i];
                if (status[position] != 0) // 节点已经经历过
                {
                    if (status[position] == status[ret]) // 检查节点
                        return false;
                }
                else // 标记节点
                {
                    flag = 0;
                    status[position] = -status[ret];
                    push(stack, position); // 进入当前节点的下一层
                }
            }
            if (flag) // 当前节点已经遍历完成，返回上一层
                pop(stack, &ret);
        }
    }
    return true; // 归类完成
}
